# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
    # Artifact name
        name: Jar_Snapshot_Build # optional
    # A file, directory or wildcard pattern that describes what to upload
        path: target/bukkitcord-*.jar
    - name: Upload to Repo
      run: |
        echo "Deploying to the Github..."
        git clone --depth=1 https://${{ secrets.REPO_KEY }}@github.com/DreamlessRealm/maven-repo.git /home/runner/maven-repo
        mvn deploy -DaltDeploymentRepository=maven-repo::default::file:/home/runner/maven-repo
        git config --global user.email "actions@github.com"
        git config --global user.name "Github Actions User"
        cd /home/runner/maven-repo
        git add .
        git commit -m "Auto update by Github Actions"
        git push --force
    - name: Auto Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.run_number }}
        release_name: Snapshot Build ${{ github.run_number }}
        body: |
          自动发布的Release
          Build ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Create zip Asset
      run: |
        zip -v Released_File_Build_${{ github.run_number }}.zip ./target/*.jar
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Release_File.zip
        asset_name: Release_File.zip
        asset_content_type: application/zip
